//Models

model User {
    id                  Int         @id @default(autoincrement())

    email               String      @unique @db.VarChar(40)
    password            String

    firstName           String      @db.VarChar(20)
    lastName            String      @db.VarChar(40)

    budget              Budget[]
    cashMovement        CashMovement[]
}

//Tipos como entrada, saida, etc
model TypeMovement {
    id                  Int         @id @default(autoincrement())
    name                String      @unique
    description         String

    cashMovement        CashMovement[]
}

//Registro de entradas e saídas
model CashMovement {
    id              Int             @id @default(autoincrement())
    association     String          // Ifood
    budget          Budget          @relation(fields: [budgetId], references: [id])
    budgetId        Int             //Restaurante
    description     String          //Comida japonesa
    cash            Decimal         @db.Decimal(10, 2)
    dateToPay       DateTime?       @db.Date

    userId          Int             @default(0)
    user            User            @relation(fields: [userId], references: [id])

    typeMovement    TypeMovement    @relation(fields: [typeMovementId], references: [id])
    typeMovementId  Int
}

//Utilizar como valor total até para abater valores de contas e investimentos
model Budget {
    id              Int         @id @default(autoincrement())
    name            String      //Restaurante
    description     String      //Destinado a gastos com restaurantes, ifood, etc.
    cash            Decimal     @db.Decimal(10, 2)
    initialCash     Decimal     @db.Decimal(10, 2) @default(0)

    userId          Int         @default(0)
    user            User        @relation(fields: [userId], references: [id])

    cashMovement    CashMovement[]
}